"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/classroom/[id]/page",{

/***/ "(app-pages-browser)/./src/utils/textToSpeech.ts":
/*!***********************************!*\
  !*** ./src/utils/textToSpeech.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearSpeechQueue: function() { return /* binding */ clearSpeechQueue; },\n/* harmony export */   getSpeechStatus: function() { return /* binding */ getSpeechStatus; },\n/* harmony export */   isTTSAvailable: function() { return /* binding */ isTTSAvailable; },\n/* harmony export */   pauseSpeaking: function() { return /* binding */ pauseSpeaking; },\n/* harmony export */   resumeSpeaking: function() { return /* binding */ resumeSpeaking; },\n/* harmony export */   speakLongContent: function() { return /* binding */ speakLongContent; },\n/* harmony export */   speakText: function() { return /* binding */ speakText; },\n/* harmony export */   speakWithVoiceId: function() { return /* binding */ speakWithVoiceId; },\n/* harmony export */   stopSpeaking: function() { return /* binding */ stopSpeaking; },\n/* harmony export */   ttsService: function() { return /* binding */ ttsService; }\n/* harmony export */ });\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios_cache_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios-cache-adapter */ \"(app-pages-browser)/./node_modules/axios-cache-adapter/dist/cache.js\");\n/* harmony import */ var axios_cache_adapter__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios_cache_adapter__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nclass TextToSpeechService {\n    async fetchVoiceAudioBuffer(text, voiceId) {\n        console.log(\"Fetching audio buffer for: \\n\".concat(text, \" \\nVoice ID: \").concat(voiceId));\n        const apiResponse = await this.api({\n            url: this.murfApiUrl,\n            method: \"POST\",\n            headers: {\n                Authorization: \"Bearer \".concat(this.murfApiKey)\n            },\n            data: {\n                text: text,\n                voiceId: voiceId\n            }\n        });\n        return apiResponse.data;\n    }\n    /**\n   * Convert text to speech using ElevenLabs API\n   */ async textToSpeech(text) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        if (!this.apiKey) {\n            throw new Error(\"ElevenLabs API key is required\");\n        }\n        if (!text.trim()) {\n            throw new Error(\"Text cannot be empty\");\n        }\n        const { voice = this.defaultVoices.narrator, model = \"eleven_monolingual_v1\", stability = 0.5, similarityBoost = 0.75, style = 0, useSpeakerBoost = true } = options;\n        const voiceSettings = {\n            stability,\n            similarity_boost: similarityBoost,\n            style,\n            use_speaker_boost: useSpeakerBoost\n        };\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl, \"/text-to-speech/\").concat(voice), {\n                method: \"POST\",\n                headers: {\n                    \"Accept\": \"audio/mpeg\",\n                    \"Content-Type\": \"application/json\",\n                    \"xi-api-key\": this.apiKey\n                },\n                body: JSON.stringify({\n                    text: this.cleanTextForTTS(text.trim()),\n                    model_id: model,\n                    voice_settings: voiceSettings\n                })\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(\"TTS API error: \".concat(response.status, \" - \").concat(errorText));\n            }\n            return await response.arrayBuffer();\n        } catch (error) {\n            console.error(\"Text-to-speech error:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Play audio from ArrayBuffer\n   */ async playAudio(audioBuffer, queueId) {\n        return new Promise((resolve, reject)=>{\n            try {\n                // Check if this queue item is still valid\n                if (this.currentQueueId !== queueId) {\n                    resolve(); // Silently resolve if queue item was cancelled\n                    return;\n                }\n                const blob = new Blob([\n                    audioBuffer\n                ], {\n                    type: \"audio/mpeg\"\n                });\n                const audioUrl = URL.createObjectURL(blob);\n                // Stop current audio if playing\n                this.stopAudio();\n                this.currentAudio = new Audio(audioUrl);\n                this.currentAudio.preload = \"auto\";\n                this.currentAudio.onloadeddata = ()=>{\n                    console.log(\"Audio loaded successfully\");\n                };\n                this.currentAudio.onplay = ()=>{\n                    this.isPlaying = true;\n                };\n                this.currentAudio.onended = ()=>{\n                    this.isPlaying = false;\n                    this.currentQueueId = null;\n                    URL.revokeObjectURL(audioUrl);\n                    resolve();\n                };\n                this.currentAudio.onerror = (error)=>{\n                    this.isPlaying = false;\n                    this.currentQueueId = null;\n                    URL.revokeObjectURL(audioUrl);\n                    console.error(\"Audio playback error:\", error);\n                    reject(new Error(\"Audio playback failed\"));\n                };\n                this.currentAudio.onpause = ()=>{\n                    this.isPlaying = false;\n                };\n                // Start playback\n                this.currentAudio.play().catch(reject);\n            } catch (error) {\n                console.error(\"Error creating audio:\", error);\n                this.currentQueueId = null;\n                reject(error);\n            }\n        });\n    }\n    /**\n   * Speak text with options\n   */ async speak(text) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        return new Promise((resolve, reject)=>{\n            const queueItem = {\n                text,\n                options,\n                resolve,\n                reject,\n                id: \"tts-\".concat(Date.now(), \"-\").concat(Math.random())\n            };\n            this.queue.push(queueItem);\n            console.log(\"Audio queued:\", this.queue);\n            this.processQueue();\n        });\n    }\n    /**\n   * Speak with specific voice ID (for discussion messages)\n   */ async speakWithVoiceId(text, voiceId) {\n        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        const voiceOptions = {\n            voice: voiceId,\n            stability: 0.6,\n            similarityBoost: 0.75,\n            style: 0.2,\n            useSpeakerBoost: true,\n            ...options\n        };\n        console.log(\"called speakWithVoiceId()\");\n        return this.speak(text, voiceOptions);\n    }\n    /**\n   * Process the TTS queue\n   */ async processQueue() {\n        if (this.isProcessing || this.queue.length === 0) {\n            return;\n        }\n        this.isProcessing = true;\n        while(this.queue.length > 0){\n            const queueItem = this.queue.shift();\n            const { text, options, resolve, reject, id } = queueItem;\n            try {\n                this.currentQueueId = id;\n                // Show loading toast for longer texts\n                let loadingToast;\n                if (text.length > 100) {\n                    loadingToast = react_hot_toast__WEBPACK_IMPORTED_MODULE_0__[\"default\"].loading(\"Generating speech...\", {\n                        duration: 5000\n                    });\n                }\n                const audioBuffer = await this.textToSpeech(text, options);\n                if (loadingToast) {\n                    react_hot_toast__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dismiss(loadingToast);\n                }\n                // Check if this queue item is still valid before playing\n                if (this.currentQueueId === id) {\n                    await this.playAudio(audioBuffer, id);\n                }\n                resolve();\n            } catch (error) {\n                console.error(\"TTS processing error:\", error);\n                // Only show error toast if this was the current item\n                if (this.currentQueueId === id) {\n                    react_hot_toast__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error(\"Speech generation failed\");\n                }\n                this.currentQueueId = null;\n                reject(error);\n            }\n        }\n        this.isProcessing = false;\n    }\n    /**\n   * Stop current audio playback and clear queue\n   */ stopAudio() {\n        if (this.currentAudio) {\n            this.currentAudio.pause();\n            this.currentAudio.currentTime = 0;\n            this.isPlaying = false;\n        }\n        this.currentQueueId = null;\n    }\n    /**\n   * Pause current audio playback\n   */ pauseAudio() {\n        if (this.currentAudio && this.isPlaying) {\n            this.currentAudio.pause();\n        }\n    }\n    /**\n   * Resume current audio playback\n   */ resumeAudio() {\n        if (this.currentAudio && !this.isPlaying) {\n            this.currentAudio.play().catch(console.error);\n        }\n    }\n    /**\n   * Clear the TTS queue\n   */ clearQueue() {\n        this.queue.forEach((param)=>{\n            let { reject } = param;\n            reject(new Error(\"Queue cleared\"));\n        });\n        this.queue = [];\n        this.currentQueueId = null;\n        this.stopAudio();\n    }\n    /**\n   * Get current playback status\n   */ getStatus() {\n        var _this_currentAudio, _this_currentAudio1;\n        return {\n            isPlaying: this.isPlaying,\n            queueLength: this.queue.length,\n            isProcessing: this.isProcessing,\n            currentTime: ((_this_currentAudio = this.currentAudio) === null || _this_currentAudio === void 0 ? void 0 : _this_currentAudio.currentTime) || 0,\n            duration: ((_this_currentAudio1 = this.currentAudio) === null || _this_currentAudio1 === void 0 ? void 0 : _this_currentAudio1.duration) || 0\n        };\n    }\n    /**\n   * Speak text with persona-specific voice\n   */ /**\n   * Utility method to clean text for better TTS\n   */ cleanTextForTTS(text) {\n        return text.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\") // Remove markdown bold\n        .replace(/\\*(.*?)\\*/g, \"$1\") // Remove markdown italic\n        .replace(/`(.*?)`/g, \"$1\") // Remove code blocks\n        .replace(/#{1,6}\\s/g, \"\") // Remove markdown headers\n        .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, \"$1\") // Convert links to text\n        .replace(/\\n{2,}/g, \". \") // Replace multiple newlines with periods\n        .replace(/\\n/g, \" \") // Replace single newlines with spaces\n        .replace(/\\s{2,}/g, \" \") // Replace multiple spaces with single space\n        .replace(/[^\\w\\s.,!?;:'\"()-]/g, \"\") // Remove special characters that might cause issues\n        .trim();\n    }\n    /**\n   * Speak cleaned text\n   */ async speakCleaned(text) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const cleanedText = this.cleanTextForTTS(text);\n        return this.speak(cleanedText, options);\n    }\n    /**\n   * Break long text into chunks and speak them\n   */ async speakLongText(text) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, maxChunkLength = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 500;\n        const cleanedText = this.cleanTextForTTS(text);\n        if (cleanedText.length <= maxChunkLength) {\n            return this.speak(cleanedText, options);\n        }\n        // Split text into sentences\n        const sentences = cleanedText.split(/[.!?]+/).filter((s)=>s.trim().length > 0);\n        const chunks = [];\n        let currentChunk = \"\";\n        for (const sentence of sentences){\n            const trimmedSentence = sentence.trim();\n            if (currentChunk.length + trimmedSentence.length + 1 <= maxChunkLength) {\n                currentChunk += (currentChunk ? \". \" : \"\") + trimmedSentence;\n            } else {\n                if (currentChunk) {\n                    chunks.push(currentChunk + \".\");\n                }\n                currentChunk = trimmedSentence;\n            }\n        }\n        if (currentChunk) {\n            chunks.push(currentChunk + \".\");\n        }\n        // Speak each chunk sequentially\n        for (const chunk of chunks){\n            await this.speak(chunk, options);\n        }\n    }\n    /**\n   * Check if TTS is available\n   */ isAvailable() {\n        return !!this.apiKey;\n    }\n    constructor(){\n        this.baseUrl = \"https://api.elevenlabs.io/v1\";\n        this.murfApiUrl = \"https://api.murf.ai/v1/speech/generate\";\n        this.murfApiKey = \"ap2_5a73745b-600e-4343-8b1c-bd5f8034fdc5\";\n        this.currentAudio = null;\n        this.isPlaying = false;\n        this.queue = [];\n        this.isProcessing = false;\n        this.currentQueueId = null;\n        this.api = axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].create({\n            adapter: (0,axios_cache_adapter__WEBPACK_IMPORTED_MODULE_1__.setupCache)({\n                maxAge: 3 * 60 * 60 * 1000\n            }).adapter\n        });\n        // Default voices for different personas (fallback)\n        this.defaultVoices = {\n            teacher: \"EXAVITQu4vr4xnSDxMaL\",\n            student: \"pNInz6obpgDQGcFmaJgB\",\n            narrator: \"21m00Tcm4TlvDq8ikWAM\"\n        };\n        this.apiKey = \"sk_e30926529c1ec50c9af5ee50f2f17ad788ac0dbe55af3ea9\" || 0;\n        if (!this.apiKey) {\n            console.warn(\"ElevenLabs API key not found. TTS functionality will be limited.\");\n        }\n    }\n}\n// Create singleton instance\nconst ttsService = new TextToSpeechService();\n// Export utility functions\nconst speakText = (text, options)=>ttsService.speakCleaned(text, options);\nconst speakWithVoiceId = (text, voiceId, options)=>ttsService.speakWithVoiceId(text, voiceId, options);\nconst speakLongContent = (text, options)=>ttsService.speakLongText(text, options);\nconst stopSpeaking = ()=>ttsService.stopAudio();\nconst pauseSpeaking = ()=>ttsService.pauseAudio();\nconst resumeSpeaking = ()=>ttsService.resumeAudio();\nconst clearSpeechQueue = ()=>ttsService.clearQueue();\nconst getSpeechStatus = ()=>ttsService.getStatus();\nconst isTTSAvailable = ()=>ttsService.isAvailable();\n/* harmony default export */ __webpack_exports__[\"default\"] = (ttsService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/textToSpeech.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/utils/tts.ts":
/*!**************************!*\
  !*** ./src/utils/tts.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TTS: function() { return /* binding */ TTS; },\n/* harmony export */   TextNode: function() { return /* binding */ TextNode; }\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./src/utils/constants.ts\");\n\nclass TextNode {\n    cleanTextForTTS(text) {\n        return text.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\") // Remove markdown bold\n        .replace(/\\*(.*?)\\*/g, \"$1\") // Remove markdown italic\n        .replace(/`(.*?)`/g, \"$1\") // Remove code blocks\n        .replace(/#{1,6}\\s/g, \"\") // Remove markdown headers\n        .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, \"$1\") // Convert links to text\n        .replace(/\\n{2,}/g, \". \") // Replace multiple newlines with periods\n        .replace(/\\n/g, \" \") // Replace single newlines with spaces\n        .replace(/\\s{2,}/g, \" \") // Replace multiple spaces with single space\n        .replace(/[^\\w\\s.,!?;:'\"()-]/g, \"\") // Remove special characters that might cause issues\n        .trim();\n    }\n    async fetchVoiceAudioBuffer() {\n        var _this_persona_voice;\n        console.log(\"Fetching audio buffer for: \\n\".concat(this.text, \" \\nVoice ID: \").concat((_this_persona_voice = this.persona.voice) === null || _this_persona_voice === void 0 ? void 0 : _this_persona_voice.id));\n        this.loading = true;\n        try {\n            var _this_persona_voice1;\n            var _this_persona_voice_id;\n            const apiResponse = await fetch(this.murfApiUrl, {\n                method: \"POST\",\n                headers: {\n                    \"api-key\": this.murfApiKey,\n                    \"Content-Type\": \"Application/json\"\n                },\n                body: JSON.stringify({\n                    text: this.cleanTextForTTS(this.text),\n                    voiceId: (_this_persona_voice_id = (_this_persona_voice1 = this.persona.voice) === null || _this_persona_voice1 === void 0 ? void 0 : _this_persona_voice1.id) !== null && _this_persona_voice_id !== void 0 ? _this_persona_voice_id : _constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_VOICE_ID\n                }),\n                cache: \"force-cache\"\n            });\n            if (!apiResponse.status.toString().startsWith(\"2\")) throw Error(\"Error fetching audio buffer\");\n            const resData = await apiResponse.json();\n            this.loading = false;\n            return resData === null || resData === void 0 ? void 0 : resData.audioFile;\n        } catch (err) {\n            this.loading = false;\n            throw Error(\"Error fetching audio buffer: \".concat(err));\n        }\n    }\n    async play() {\n        try {\n            this.playing = true;\n            if (!this.fetched || !this.data) {\n                await this.fetch();\n            }\n            console.log(\"After fetch in play:\", this.loading);\n            if (this.loading) return false;\n            if (this.audioRef.current && this.data) {\n                this.audioRef.current.src = this.data;\n                // Play audio\n                await this.audioRef.current.play();\n                // Wait for playback to finish\n                await new Promise((resolve, reject)=>{\n                    const audio = this.audioRef.current;\n                    audio.onended = null;\n                    audio.onerror = null;\n                    const onEnded = ()=>{\n                        cleanup();\n                        resolve();\n                    };\n                    const onError = (err)=>{\n                        cleanup();\n                        reject(err);\n                    };\n                    const cleanup = ()=>{\n                        audio.removeEventListener(\"ended\", onEnded);\n                        audio.removeEventListener(\"error\", onError);\n                    };\n                    audio.addEventListener(\"ended\", onEnded);\n                    audio.addEventListener(\"error\", onError);\n                });\n                this.played = true;\n                this.playing = false;\n                return true;\n            }\n            return false;\n        } catch (err) {\n            console.log(\"Error while playing audio: \".concat(err));\n            this.playing = false;\n            return false;\n        }\n    }\n    async fetch() {\n        const audioDataRes = await this.fetchVoiceAudioBuffer();\n        if (audioDataRes) {\n            this.data = audioDataRes;\n            this.fetched = true;\n        }\n    }\n    pause() {\n        var _this_audioRef_current;\n        (_this_audioRef_current = this.audioRef.current) === null || _this_audioRef_current === void 0 ? void 0 : _this_audioRef_current.pause();\n        this.played = true;\n        this.playing = false;\n    }\n    setNext(next) {\n        this.next = next;\n    }\n    getNext() {\n        return this.next;\n    }\n    constructor(id, text, persona, timestamp, audioRef, next = null, loading = false, playing = false, fetched = false, data = null, played = false, murfApiUrl = \"https://api.murf.ai/v1/speech/generate\", murfApiKey = \"ap2_5a73745b-600e-4343-8b1c-bd5f8034fdc5\"){\n        this.id = id;\n        this.text = text;\n        this.persona = persona;\n        this.timestamp = timestamp;\n        this.audioRef = audioRef;\n        this.next = next;\n        this.loading = loading;\n        this.playing = playing;\n        this.fetched = fetched;\n        this.data = data;\n        this.played = played;\n        this.murfApiUrl = murfApiUrl;\n        this.murfApiKey = murfApiKey;\n    }\n}\nclass TTS {\n    async autoplay() {\n        if (!this.autoplayon || !this.queue.length) return false;\n        this.current = this.queue[0];\n        await this.current.play();\n        const next = this.current.getNext();\n        while(this.autoplayon && next){\n            await next.play();\n        }\n    }\n    async playNode(node) {\n        await node.play();\n    }\n    stopPlay() {\n        var _this_audioRef_current;\n        const current = this.current;\n        (_this_audioRef_current = this.audioRef.current) === null || _this_audioRef_current === void 0 ? void 0 : _this_audioRef_current.pause();\n        if (current) {\n            var _this_current;\n            (_this_current = this.current) === null || _this_current === void 0 ? void 0 : _this_current.pause();\n            this.current = null;\n            return current;\n        }\n        return;\n    }\n    enqueue(d) {\n        const textNode = new TextNode(d._id, d.data, d.persona, d.timestamp, this.audioRef);\n        this.queue.push(textNode);\n        if (this.queue.length > 1) {\n            const prevNode = this.queue[this.queue.length - 2];\n            prevNode.setNext(textNode);\n        }\n        return textNode;\n    }\n    dequeue() {\n        return this.queue.pop();\n    }\n    seek(node) {\n        this.current = node;\n    }\n    constructor(data = [], current = null, queue = [], audioRef, autoplayon = true){\n        this.data = data;\n        this.current = current;\n        this.queue = queue;\n        this.audioRef = audioRef;\n        this.autoplayon = autoplayon;\n        this.data.map((d)=>{\n            const timestamp = new Date(d.createdAt);\n            return this.enqueue({\n                ...d !== null && d !== void 0 ? d : {},\n                data: d.body,\n                persona: d.persona,\n                timestamp\n            });\n        });\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/tts.ts\n"));

/***/ })

});